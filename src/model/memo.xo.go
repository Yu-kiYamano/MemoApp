// Package model contains the types for schema 'memoapp'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Memo represents a row from 'memoapp.memo'.
type Memo struct {
	ID        uint      `json:"id"`         // id
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	Title     string    `json:"title"`      // title

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Memo exists in the database.
func (m *Memo) Exists() bool {
	return m._exists
}

// Deleted provides information if the Memo has been deleted from the database.
func (m *Memo) Deleted() bool {
	return m._deleted
}

// Insert inserts the Memo to the database.
func (m *Memo) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO memoapp.memo (` +
		`id, created_at, updated_at, title` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.ID, m.CreatedAt, m.UpdatedAt, m.Title)
	_, err = db.Exec(sqlstr, m.ID, m.CreatedAt, m.UpdatedAt, m.Title)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Memo in the database.
func (m *Memo) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE memoapp.memo SET ` +
		`created_at = ?, updated_at = ?, title = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, m.CreatedAt, m.UpdatedAt, m.Title, m.ID)
	_, err = db.Exec(sqlstr, m.CreatedAt, m.UpdatedAt, m.Title, m.ID)
	return err
}

// Save saves the Memo to the database.
func (m *Memo) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Delete deletes the Memo from the database.
func (m *Memo) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM memoapp.memo WHERE id = ?`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MemoByID retrieves a row from 'memoapp.memo' as a Memo.
//
// Generated from index 'memo_id_pkey'.
func MemoByID(db XODB, id uint) (*Memo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created_at, updated_at, title ` +
		`FROM memoapp.memo ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Memo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.CreatedAt, &m.UpdatedAt, &m.Title)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
